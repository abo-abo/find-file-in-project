* find-file-in-project (v3.8)
Find files in a project quickly, on *any operating system*.

This program provides a couple methods for quickly finding any file in a given project. It depends on [[http://www.gnu.org/software/findutils/][GNU find]].

By default, it will *automatically* search file in project managed by *git/subversion/mercurial*. But you can easily switch to other types of projects.

Features:
- Only dependency is GNU find
- Works perfectly on any OS (Yes, *including Windows*)
- It's quick. Tested with 50,000+ files with NO performance issue
- Furthing tweaking of GNU find through flag `ffip-find-options` is possible
- Versatile. You provide "helloWorld.html", we search "HelloWorld.html" "hello-world.css", "HelloWorld.js"
* Install
Please use [[http://melpa.org/#/find-file-in-project][melpa]].

[[https://github.com/abo-abo/swiper][Ivy-mode]] is the dependency which is installed automatically if you use melpa.

Since v3.7, Emacs 24.3 is required.
* Setup
All variables may be overridden on a per-directory basis in your .dir-locals.el. See (info "(Emacs) Directory Variables") for details.

Or you can check the `Per project setup` section in this README which only requires you modify ~/.emacs.

Windows setup is as easy as *install Cygwin at default directory of any driver*. `GNU Find' will be detected automatically. You don't need tweak environment variable at all!
* Usage
- *`M-x find-file-in-project`* starts search immediately
- *`M-x find-file-in-project-by-selected`* use the *selected region as keyword* to search. If no region selected, you need provide the keyword

For `find-file-in-project-by-selected`, keyword could be ANY part of the file's full path and it supports wildcard.

For example, to find /home/john/proj1/test.js, below keywords are valid,
- test.js
- orj1/tes
- john*test
* Tips
** Search files modified in recent 5 days
`C-u 5 M-x find-file-in-project`
`C-u 5 M-x find-file-in-project-by-selected`
** APIs
- "ffip-get-project-root-directory" return the full path of current project
** Per project setup
#+begin_src elisp
;; if the full path of current file is under SUBPROJECT1 or SUBPROJECT2
;; OR if I'm reading my personal issue track document,
(when (ffip-current-full-filename-match-pattern-p "\\(/SUBPROJECT1\\|/SUBPROJECT2\\|issue-track.org\\)")
  ;; set the root directory into "~/projs/PROJECT_DIR"
  (setq-local ffip-project-root ("~/projs/PROJECT_DIR"))
  ;; well, I'm not interested in concatenated BIG js file or file in dist/
  (setq-local ffip-find-options "-not -size +64k -not -iwholename '*/dist/*'")
  ;; do NOT search files in below directories
  (setq-local ffip-prune-patterns '("*/.git" "*/.hg" "*/.svn" "*/node_modules/*" "*/bower_components/*")))
  ;; for this project, I'm only interested certain types of files
  (setq-local ffip-patterns '("*.html" "*.js" "*.css" "*.java" "*.xml" "*.js")))
#+end_src
** Specify root directory on Windows
#+begin_src elisp
(if (eq system-type 'windows-nt)
    ;; Native Windows
    (setq ffip-project-root "C:/Users/myname/projs/myproj1")
  ;; Cygwin
  (setq ffip-project-root "~/projs/myprojs1"))
#+end_src
** Search multiple file name patterns
The variable `ffip-filename-rules' create some extra file names for
search when calling `find-file-in-project-by-selected'. For example,
When file basename `helloWorld' provided, `HelloWorld', `hello-world'
are added as the file name search patterns.

`C-h v ffip-filename-rules' to see its default value.

As other variables, it could be customized per project,
#+begin_src elisp
(setq-local ffip-filename-rules
            '(ffip-filename-identity
              ffip-filename-dashes-to-camelcase
              ffip-filename-camelcase-to-dashes))
#+end_src

That's especially useful when you are doing web frontend development.
* Bug Report
Check [[https://github.com/technomancy/find-file-in-project]]
